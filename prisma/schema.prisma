generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  PROCESSING
  DELIVERED
  CANCELLED
}

model User {
  id                     Int      @id @default(autoincrement())
  name                   String
  email                  String   @unique
  password               String
  role                   Role     @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  addresses Address[]
  CartItem  CartItem[]
  Order     Order[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]
  orders    OrderProduct[]

  @@map("products")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  zipCode   String
  city      String
  country   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("cartItems")
}

model Order {
  id        Int              @id @default(autoincrement())
  userId    Int
  User      User             @relation(fields: [userId], references: [id])
  netAmount Decimal
  status    OrderEventStatus @default(PENDING)
  address   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  products  OrderProduct[]
  events    OrderEvents[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvents {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
